(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
module.exports = {
  100: 'Continue',
  101: 'Switching Protocols',
  200: 'OK',
  201: 'Created',
  202: 'Accepted',
  203: 'Non-Authoritative Information',
  204: 'No Content',
  205: 'Reset Content',
  206: 'Partial Content',
  300: 'Multiple Choices',
  301: 'Moved Permanently',
  302: 'Found',
  303: 'See Other',
  304: 'Not Modified',
  305: 'Use Proxy',
  307: 'Temporary Redirect',
  400: 'Bad Request',
  401: 'Unauthorized',
  402: 'Payment Required',
  403: 'Forbidden',
  404: 'Not Found',
  405: 'Method Not Allowed',
  406: 'Not Acceptable',
  407: 'Proxy Authentication Required',
  408: 'Request Time-out',
  409: 'Conflict',
  410: 'Gone',
  411: 'Length Required',
  412: 'Precondition Failed',
  413: 'Request Entity Too Large',
  414: 'Request-URI Too Large',
  415: 'Unsupported Media Type',
  416: 'Requested Range not Satisfiable',
  417: 'Expectation Failed',
  422: 'Unprocessable Entity',
  429: 'Too Many Requests',
  451: 'Unavailable For Legal Reasons',
  500: 'Internal Server Error',
  501: 'Not Implemented',
  502: 'Bad Gateway',
  503: 'Service Unavailable',
  504: 'Gateway Time-out',
  505: 'HTTP Version not Supported',
  CONTINUE: 100,
  SWITCHING_PROTOCOLS: 101,
  OK: 200,
  CREATED: 201,
  ACCEPTED: 202,
  NON_AUTHORITATIVE_INFORMATION: 203,
  NO_CONTENT: 204,
  RESET_CONTENT: 205,
  PARTIAL_CONTENT: 206,
  MULTIPLE_CHOICES: 300,
  MOVED_PERMANENTLY: 301,
  FOUND: 302,
  SEE_OTHER: 303,
  NOT_MODIFIED: 304,
  USE_PROXY: 305,
  TEMPORARY_REDIRECT: 307,
  BAD_REQUEST: 400,
  UNAUTHORIZED: 401,
  PAYMENT_REQUIRED: 402,
  FORBIDDEN: 403,
  NOT_FOUND: 404,
  METHOD_NOT_ALLOWED: 405,
  NOT_ACCEPTABLE: 406,
  PROXY_AUTHENTICATION_REQUIRED: 407,
  REQUEST_TIMEOUT: 408,
  CONFLICT: 409,
  GONE: 410,
  LENGTH_REQUIRED: 411,
  PRECONDITION_FAILED: 412,
  REQUEST_ENTITY_TOO_LARGE: 413,
  REQUEST_URI_TOO_LONG: 414,
  UNSUPPORTED_MEDIA_TYPE: 415,
  REQUESTED_RANGE_NOT_SATISFIABLE: 416,
  EXPECTATION_FAILED: 417,
  UNPROCESSABLE_ENTITY: 422,
  TOO_MANY_REQUESTS: 429,
  UNAVAILABLE_FOR_LEGAL_REASONS: 451,
  INTERNAL_SERVER_ERROR: 500,
  NOT_IMPLEMENTED: 501,
  BAD_GATEWAY: 502,
  SERVICE_UNAVAILABLE: 503,
  GATEWAY_TIMEOUT: 504,
  HTTP_VERSION_NOT_SUPPORTED: 505
};

},{}],2:[function(require,module,exports){
var controllers = require("./directives/controllers"),
    directives = require("./directives/directives"),
    services = require("./services/services");

var components = angular.module("app_components", ["ng"]);

for (var controllerName in controllers)
  components.controller(controllerName, controllers[controllerName]);

for (var directiveName in directives)
  components.directive(directiveName, directives[directiveName]);
      
for (var serviceName in services)
  components.factory(serviceName, services[serviceName]);

var app = angular.module("warframeTrade", [
                                            "ngAnimate",
                                            "ngTouch",
                                            "ui.bootstrap",
                                            "ui.router",
                                            "app_components"
                                          ]);

app.config(function($stateProvider, $urlRouterProvider) {
  $urlRouterProvider
    .otherwise("/home");

  $stateProvider
    .state("root", {
      abstract: true,
      template: "<custom-nav-bar user='userSession'></custom-nav-bar>",
      resolve: {
        userSession: function(userSessionService) {
          return userSessionService.getUserSession();
        }
      },
      controller: function($scope, userSession) {
        $scope.userSession = userSession;
      }
    })
    .state("root.home", {
      url: "/home",
      template: "<home user='userSession'></home>",
      controller: function($scope, userSession) {
        $scope.userSession = userSession;
      }
    })
    .state("root.buylist", {
      url: "/list",
      template: "<buy-list user='userSession'></buy-list>",
      controller: function($scope, userSession) {
        $scope.userSession = userSession;
      }
    })
    .state("root.sell", {
      url: "/sell",
      templateUrl: "/ng/templates/sell.html"
    })
    .state("root.sell.list", {
      url: "/list",
      template: "<sell-list user='userSession'></sell-list>",
      controller: function($scope, userSession) {
        $scope.userSession = userSession;
      }
    })
});

},{"./directives/controllers":4,"./directives/directives":6,"./services/services":9}],3:[function(require,module,exports){
module.exports = function($scope) {
  this.scope = $scope;

  this.scope.posts = [
                       "Buy Post 1",
                       "Buy Post 2"
                     ];
};

},{}],4:[function(require,module,exports){
exports.homeController =
  require("./home/homeController.js");

exports.buyListController =
  require("./buyList/buyListController.js");

exports.sellListController =
  require("./sellList/sellListController.js");

exports.customNavBarController =
  require("./customNavBar/customNavBarController.js");

},{"./buyList/buyListController.js":3,"./customNavBar/customNavBarController.js":5,"./home/homeController.js":7,"./sellList/sellListController.js":8}],5:[function(require,module,exports){
module.exports = function($scope, $state, $http) {
  var debug = false;

  $scope.ctrl = this;
  this.scope = $scope;

  if (debug) {
    console.log("scope:")
    console.log(this.scope);
  }

  this.signOut = function signOut() {
    if (!this.scope.user)
      return;

    $http.get("/api/signOut")
         .success(function(res) {
           if (debug)
             console.log("SignOut Successful!");

           // Session Cleared but not redirected due to 
           this.scope.user = res.user;
           $state.go("navbar.buy");
         }.bind(this))
         .error(function(err) {
           if (debug)
             console.log("SignOut Failed!");
         });
  };
};

},{}],6:[function(require,module,exports){
exports.home = function() {
  return {
    restrict: "AE",
    controller: "homeController",
    templateUrl: "/ng/directives/home/homeView.html",
    scope: {
      user: "=user"
    }
  };
};

exports.buyList = function() {
  return {
    restrict: "AE",
    controller: "buyListController",
    templateUrl: "/ng/directives/buyList/buyListView.html",
    scope: {
      user: "=user"
    }
  };
};

exports.sellList = function() {
  return {
    restrict: "AE",
    controller: "sellListController",
    templateUrl: "/ng/directives/sellList/sellListView.html",
    scope: {
      user: "=user"
    }
  };
};

exports.customNavBar = function() {
  return {
    restrict: "AE",
    controller: "customNavBarController",
    templateUrl: "/ng/directives/customNavBar/customNavBarView.html",
    scope: {
      user: "=user"
    }
  };
};

},{}],7:[function(require,module,exports){
module.exports = function($scope) {
  this.scope = $scope;

  this.scope.radioModel = "Today";
};

},{}],8:[function(require,module,exports){
module.exports = function($scope) {
  this.scope = $scope;

  this.scope.posts = [
                       "Sell Post 1",
                       "Sell Post 2"
                     ];
};

},{}],9:[function(require,module,exports){
exports.userSessionService = require("./userSessionService");

},{"./userSessionService":10}],10:[function(require,module,exports){
var httpStatus = require("http-status");

module.exports = function($http, $q) {
  return {
    getUserSession: function getUserSession() {
      var session = $q.defer();
      $http.get("/api/me")
         .success(function(res) {
           // API returns valid user data!
           session.resolve(res.user);
         })
         .error(function(res, httpStatus) {
           // Still resolve promise, with user as null
           session.resolve(null);
         });

      // Reload user session info from database every hour
      // setInterval(getUserSession, 60 * 60 * 1000);

      return session.promise;
    }  
  };
};

},{"http-status":1}]},{},[2]);
